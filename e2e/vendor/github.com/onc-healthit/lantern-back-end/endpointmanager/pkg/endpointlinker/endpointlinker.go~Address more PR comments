package endpointlinker

import (
	"context"
	"strings"
	"log"
	"regexp"
	"strconv"
	"github.com/pkg/errors"
	"github.com/onc-healthit/lantern-back-end/endpointmanager/pkg/endpointmanager/postgresql"
	"github.com/onc-healthit/lantern-back-end/endpointmanager/pkg/endpointmanager"
)

func NormalizeOrgName(orgName string) string{
	// Regex for only letters
	orgName = strings.ReplaceAll(orgName, "-", " ")
	reg, err := regexp.Compile(`[^a-zA-Z0-9\s]+`)
	if err != nil {
		log.Fatal(err)
	}
	characterStrippedName := reg.ReplaceAllString(orgName, "")
	return strings.ToUpper(characterStrippedName)
}

func intersectionCount(set1 []string, set2 []string) int{
	set1Map := make(map[string]int)
	intersectionCount := 0
	for _, name := range set1 {
		if _, exists := set1Map[name]; !exists {
			set1Map[name] = 1
		}else{
			set1Map[name] += 1
		}
	}
	for _, name := range set2 {
		if set1Map[name] > 0 {
			intersectionCount += 1
			set1Map[name] -= 1
		}
	}
	return intersectionCount
}

func CalculateJaccardIndex(string1 string, string2 string) float64 {
	// Find the number of common tokens and divide it by the total number of unique tokens
	string1Tokens := strings.Fields(string1)
	string2Tokens := strings.Fields(string2)
	intersectionCount := intersectionCount(string1Tokens, string2Tokens)
	string1UniqueTokens := len(string1Tokens)
	string2UniqueTokens := len(string2Tokens)
	denom := float64(string1UniqueTokens + string2UniqueTokens - intersectionCount)
	if denom == 0 {
		denom = 1
	}
	return float64(intersectionCount)/denom
}

// This function is available for making the matching algorithm easier to tune
func verbosePrint(message string, verbose bool) {
	if verbose == true {
		println(message)
	}
}

func GetIdsOfMatchingNPIOrgs(npiOrgNames []endpointmanager.NPIOrganization, normalizedEndpointName string, verbose bool ) ([]int, error){
	JACARD_THRESHOLD := .75

	matches := []int{}
	verbosePrint(normalizedEndpointName + " Matched To:", verbose)
	for _, npiOrg := range npiOrgNames {
		consideredMatch := false
		jacccard1 := CalculateJaccardIndex(normalizedEndpointName, npiOrg.NormalizedName)
		jacccard2 := CalculateJaccardIndex(normalizedEndpointName, npiOrg.NormalizedSecondaryName)
		if (jacccard1 == 1){
			consideredMatch = true
			matches = append(matches, npiOrg.ID)
		}else if (jacccard1 >= JACARD_THRESHOLD) {
			consideredMatch = true
			verbosePrint(normalizedEndpointName + "=>" + npiOrg.NormalizedName, verbose)
		}
		if (jacccard2 == 1){
			consideredMatch = true
		}else if (jacccard2 >= JACARD_THRESHOLD) {
			consideredMatch = true
			verbosePrint(normalizedEndpointName + "=>" + npiOrg.NormalizedSecondaryName, verbose)
		}
		if consideredMatch == true {
			matches = append(matches, npiOrg.ID)
		}
	}
	return matches, nil
}


func LinkAllOrgsAndEndpoints(ctx context.Context, store *postgresql.Store, verbose bool) error{
	fhirEndpointOrgNames, err := store.GetAllFHIREndpointOrgNames(ctx)
	if err != nil {
		return errors.Wrap(err,"Error getting endpoint org names")
	}

	npiOrgNames, err := store.GetAllNPIOrganizationNormalizedNames(ctx)
	if err != nil {
		return errors.Wrap(err,"Error getting normalized org names")
	}

	matchCount := 0
	unmatchable := []string{}
	// Iterate through fhir endpoints
	for _, endpoint := range fhirEndpointOrgNames {
		normalizedEndpointName := NormalizeOrgName(endpoint.OrganizationName)
		matches := []int{}
		matches, err = GetIdsOfMatchingNPIOrgs(npiOrgNames, normalizedEndpointName, verbose)
		if (len(matches) > 0){
			matchCount += 1
			// Iterate over matches and add to linking table
			for _, match := range matches {
				store.LinkNPIOrganizationToFHIREndpoint(ctx, match, endpoint.ID)
			}
		}else{
			unmatchable = append(unmatchable, endpoint.OrganizationName )
		}

	}

	verbosePrint("Match Total: " + strconv.Itoa(matchCount) + "/" + strconv.Itoa(len(fhirEndpointOrgNames)), verbose)

	verbosePrint("UNMATCHABLE ENDPOINT ORG NAMES", verbose)
	for _, name := range unmatchable {
		verbosePrint(name, verbose)
	}

	return nil;
}