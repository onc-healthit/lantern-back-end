version: '3'

services:
  endpoint_querier:
    container_name: endpoint_querier_1
    build: 
      context: ./networkstatsquerier

  pg_prometheus:
    container_name: pg_prometheus
    image: timescale/pg_prometheus:latest-pg11
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/dbsetup.sql:/docker-entrypoint-initdb.d/dbsetup.sql
    environment:
      - POSTGRES_PASSWORD=${LANTERN_DBPASSWORD}
      - POSTGRES_USER=${LANTERN_DBUSER}
      - POSTGRES_DB=${LANTERN_DBNAME}
    command:
      -csynchronous_commit=off

  prometheus_postgresql_adapter:
    container_name: prometheus_postgres_adapter
    image: timescale/prometheus-postgresql-adapter
    depends_on:
      - pg_prometheus
    restart: on-failure
    volumes:
      - ./scripts/pause_start_prometheus_postgresql_adapter.sh:/pause_start_prometheus_postgresql_adapter.sh
    entrypoint: "/pause_start_prometheus_postgresql_adapter.sh"
    command:
      -pg-host=pg_prometheus
      -pg-password=${LANTERN_DBPASSWORD}
      -pg-database=${LANTERN_DBNAME}
      -pg-user=${LANTERN_DBUSER}
      -pg-prometheus-log-samples

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - prometheusData:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml 
    depends_on:
      - prometheus_postgresql_adapter
      - pg_prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafanaData:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
    ports:
      - "80:3000"
  
  lantern-mq:
    container_name: lantern-mq
    image: rabbitmq:3-management
    volumes:
      - ./lanternmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - ./lanternmq/definitions.json:/etc/rabbitmq/definitions.json:ro

  lantern_front_end:
    container_name: lantern_front_end
    image: onchealthit/lantern-front-end
    ports:
      - "8090:80"

volumes:
  pgdata:
  prometheusData:
  grafanaData:


